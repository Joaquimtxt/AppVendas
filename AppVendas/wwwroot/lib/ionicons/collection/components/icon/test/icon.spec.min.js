import{newSpecPage}from"@stencil/core/testing";import{Icon}from"../icon";describe("icon",()=>{it("renders",async()=>{var o=(await newSpecPage({components:[Icon],html:"<ion-icon></ion-icon>"}))["root"];expect(o).toEqualHtml(`
      <ion-icon class="md" role="img">
        <mock:shadow-root>
          <div class="icon-inner"></div>
        </mock:shadow-root>
      </ion-icon>
    `)}),it("renders rtl with aria-hidden",async()=>{var o=(await newSpecPage({components:[Icon],direction:"rtl",html:'<ion-icon name="chevron-forward" aria-hidden="true"></ion-icon>'}))["root"];expect(o).toEqualHtml(`
      <ion-icon class="md flip-rtl icon-rtl" name="chevron-forward" role="img" aria-hidden="true">
        <mock:shadow-root>
          <div class="icon-inner"></div>
        </mock:shadow-root>
      </ion-icon>
    `)}),it("renders custom aria-label",async()=>{var o=(await newSpecPage({components:[Icon],html:'<ion-icon name="star" aria-label="custom label"></ion-icon>'}))["root"];expect(o).toEqualHtml(`
      <ion-icon class="md" name="star" role="img" aria-label="custom label">
        <mock:shadow-root>
          <div class="icon-inner"></div>
        </mock:shadow-root>
      </ion-icon>
    `)}),it("renders custom label after changing source",async()=>{const o=await newSpecPage({components:[Icon],html:'<ion-icon name="chevron-forward" aria-label="custom label"></ion-icon>'}),n=o.root;expect(n).toEqualHtml(`
      <ion-icon class="flip-rtl md" name="chevron-forward" role="img" aria-label="custom label">
        <mock:shadow-root>
          <div class="icon-inner"></div>
        </mock:shadow-root>
      </ion-icon>
    `),n&&(n.name="trash"),await o.waitForChanges(),expect(n).toEqualHtml(`
      <ion-icon class="md" name="trash" role="img" aria-label="custom label">
        <mock:shadow-root>
          <div class="icon-inner"></div>
        </mock:shadow-root>
      </ion-icon>
    `)})});