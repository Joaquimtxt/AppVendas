import{Icon}from"../icon";import{addIcons,getIconMap,getName,getSrc,getUrl}from"../utils";describe("getUrl",()=>{let e;beforeEach(()=>{e=new Icon}),it("use icon prop, as name",()=>{e.icon="some-name",expect(getUrl(e)).toBe("/svg/some-name.svg")}),it("use icon prop, as url",()=>{e.icon="./some.svg",expect(getUrl(e)).toBe("./some.svg")}),it("use name prop",()=>{e.name="some-name",expect(getUrl(e)).toBe("/svg/some-name.svg")}),it("use src prop",()=>{e.src="./some.svg",e.name="some-name",e.icon="some-icon",expect(getUrl(e)).toBe("./some.svg")})}),describe("getSrc",()=>{it("both . and /",()=>{expect(getSrc("./somefile.svg")).toBe("./somefile.svg")}),it("url",()=>{expect(getSrc("https://ionicons/somefile.svg")).toBe("https://ionicons/somefile.svg")}),it("just a .",()=>{expect(getSrc("somefile.svg")).toBe("somefile.svg")}),it("just a /",()=>{expect(getSrc("/somesvg")).toBe("/somesvg")}),it("no . or /",()=>{expect(getSrc("some-name")).toBe(null)})}),describe("getName",()=>{it("not allow special chars",()=>{expect(getName("some\\name","","io","","")).toBe(null),expect(getName("some$name","","io","","")).toBe(null),expect(getName("some:name","","io","","")).toBe(null),expect(getName("some.name","","io","","")).toBe(null),expect(getName("some/name","","io","","")).toBe(null)}),it("use ios mode prefixed",()=>{expect(getName("ios-some-name","","","","")).toBe("ios-some-name")}),it("use md mode prefixed",()=>{expect(getName("md-some-name","","","","")).toBe("md-some-name")}),it("should not use name if no name, ios or md",()=>{expect(getName(void 0,void 0,"","","")).toBe(null)})}),describe("addIcons",()=>{it("should add an svg to the icon cache",()=>{expect(getIconMap().get("logo-ionic")).toEqual(void 0),addIcons({"logo-ionic":"stubbed data"}),expect(getIconMap().get("logo-ionic")).toEqual("stubbed data")}),it("should add kebab and camel case names to the icon cache",()=>{var e="stubbed data",e=(expect(getIconMap().get("logo-ionitron")).toEqual(void 0),expect(getIconMap().get("logoIonitron")).toEqual(void 0),addIcons({logoIonitron:e}),expect(getIconMap().get("logo-ionitron")).toEqual(e),expect(getIconMap().get("logoIonitron")).toEqual(e),"stubbed data 0");expect(getIconMap().get("logo-ionitron-0")).toEqual(void 0),expect(getIconMap().get("logoIonitron0")).toEqual(void 0),addIcons({logoIonitron0:e}),expect(getIconMap().get("logo-ionitron-0")).toEqual(e),expect(getIconMap().get("logoIonitron0")).toEqual(e)}),it("should map to a name that does not match the svg",()=>{var e="stubbed data";expect(getIconMap().get("my-fun-icon")).toEqual(void 0),addIcons({"my-fun-icon":e}),expect(getIconMap().get("my-fun-icon")).toEqual(e)}),it("should map to an explicit camel case name",()=>{var e="stubbed data";expect(getIconMap().get("myCoolIcon")).toEqual(void 0),addIcons({myCoolIcon:e}),expect(getIconMap().get("myCoolIcon")).toEqual(e)}),it("should not warn when mapping the same icon twice",()=>{var e=jest.spyOn(console,"warn"),o="my-icon";expect(e).not.toHaveBeenCalled(),addIcons({myIcon:o}),expect(e).not.toHaveBeenCalled(),addIcons({myIcon:o}),expect(e).not.toHaveBeenCalled()}),it("should not overwrite icons",()=>{var e=jest.spyOn(console,"warn"),o="logo a",t="logo b";expect(e).not.toHaveBeenCalled(),expect(getIconMap().get("logo-a")).toEqual(void 0),addIcons({"logo-a":t,logoA:o}),expect(getIconMap().get("logo-a")).toEqual(t),expect(getIconMap().get("logoA")).toEqual(o),expect(e).toHaveBeenCalled()})});